#!/bin/bash
#
#  Copyright 2011 The SuperTeam Developer Group
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
# Super-mega opticharger of doom
# Shrinks apks by running pngcrush on png images
#
#
SCRIPTDIR=`dirname $0`
. $SCRIPTDIR/entorno.sh

set -e
QUIET=1
QFLAG=-q
TMPDIR=/tmp/opticharge-$$

if [ "$APKCERTS" = "" ];
then
    if [ "$TARGET_BUILD_VARIANT" = "userdebug" ]; then
       TARGET_BUILD_VARIANT="eng"
    fi

    APKCERTS=$OUT/obj/PACKAGING/target_files_intermediates/$TARGET_PRODUCT-target_files-$TARGET_BUILD_VARIANT.$LOGNAME/META/apkcerts.txt
    if [ ! -f "$APKCERTS" ];
    then
        msgErr "Set APKCERTS to the path to your apkcerts.txt file"
        exit 1;
    fi
fi

if [ ! -f "$APKCERTS" ];
then
    msgErr "Invalid path to apkcerts.txt, set APKCERTS to the correct path."
fi

if [ "`which pngcrush`" = "" ];
then
    msgErr "Por favor instala pngcrush"
    exit 1;
fi

if [ "`which aapt`" = "" ];
then
    msgErr "Asegurate que aapt esta en tu \$PATH"
    exit 1;
fi

if [ "`which zipalign`" = "" ];
then
    msgErr "Asegurate que zipalign esta en tu \$PATH"
    exit 1;
fi

if [ -e "$1" ];
then
    NAME=`basename $1`;
    msgList "Optimizando" $NAME

    if [ "$2" != "" ];
    then
        CERT=build/target/product/security/$2.x509.pem
        KEY=build/target/product/security/$2.pk8
        if [ ! -f "$ANDROID_BUILD_TOP/$CERT" ];
        then
            msgErr "$CERT does not exist!"
            exit 1;
        fi
    else
        APKINFO=`grep "name=\"$NAME\"" $APKCERTS`;
        [ $QUIET ] || $ECHO "APKINFO: $APKINFO";
        if [ "$APKINFO" = "" ];
        then
            msgErr "No apk info for $NAME"
            exit 1;
        fi
        CERT=`$ECHO $APKINFO | awk {'print $2'} | cut -f 2 -d "=" | tr -d "\""`;
        KEY=`$ECHO $APKINFO | awk {'print $3'} | cut -f 2 -d "=" | tr -d "\""`;
        if [ "$CERT" = "" ];
        then
            msgErr "Unable to find certificate for $NAME"
            exit 1;
        fi
    fi

    [ $QUIET ] || $ECHO "Certificate: $CERT";

    [ -d $TMPDIR/$NAME ] && rm -rf $TMPDIR/$NAME
    mkdir -p $TMPDIR/$NAME
    trap "rm -rf $TMPDIR; exit" INT TERM EXIT
    cd $TMPDIR/$NAME
    unzip -q $1
    for x in `find . -name "*.png" | grep -v "\.9.png$" | tr "\n" " "`
    do
        [ $QUIET ] || $ECHO "Crushing $x"
        pngcrush $QFLAG $x $x.crushed 1>/dev/null
        if [ -e "$x.crushed" ];
        then
            mv $x.crushed $x
        fi
    done
    cp $1 $1.old

    [ $QUIET ] || msgStatus "Repacking apk.."
    if [ $NAME == "PinyinIME.apk" ];
    then
        aapt p -0 .dat -0 res/raw -0 res/raw-en -F $NAME .
    else
        aapt p -0 res/raw -0 res/raw-en -F $NAME .
    fi
    
    [ $QUIET ] || msgStatus "Resigning with cert: `$ECHO $CERT`"

    [ $QUIET ] || msgInfo java -jar $ANDROID_BUILD_TOP/out/host/$OUT_TARGET_HOST/framework/signapk.jar $ANDROID_BUILD_TOP/$CERT $ANDROID_BUILD_TOP/$KEY $NAME signed_$NAME
    java -jar $ANDROID_BUILD_TOP/out/host/$OUT_TARGET_HOST/framework/signapk.jar $ANDROID_BUILD_TOP/$CERT $ANDROID_BUILD_TOP/$KEY $NAME signed_$NAME
    [ $QUIET ] || msgStatus "Zipalign.."
    zipalign -f 4 signed_$NAME $1
    if [ ! $QUIET ]; then
        ls -l $1.old
        ls -l $1
    fi
    rm $1.old
else
    msgInfo "Usage: $0 [apk file]"
fi

